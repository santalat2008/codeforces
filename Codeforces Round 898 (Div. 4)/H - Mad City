import sys, threading
from collections import deque

def main():
    input = sys.stdin.readline
    t = int(input())
    
    for _ in range(t):
        n, a, b = map(int, input().split())
        a -= 1
        b -= 1
        g = [[] for _ in range(n)]
        for _ in range(n):
            u, v = map(int, input().split())
            g[u-1].append(v-1)
            g[v-1].append(u-1)

        p = [-1]*n
        vis = [0]*n
        cyc = []

        def dfs(v, par):
            vis[v] = 1
            for u in g[v]:
                if u == par: continue
                if vis[u]:
                    x = v
                    cyc.append(u)
                    while x != u:
                        cyc.append(x)
                        x = p[x]
                    return True
                p[u] = v
                if dfs(u, v): return True
            return False

        dfs(0, -1)
        inc = [0]*n
        for x in cyc: inc[x] = 1

        def bfs(s):
            d = [-1]*n
            q = deque([s])
            d[s] = 0
            while q:
                v = q.popleft()
                for u in g[v]:
                    if d[u] == -1:
                        d[u] = d[v]+1
                        q.append(u)
            return d

        da = bfs(a)
        db = bfs(b)

        ok = any(inc[i] and db[i] < da[i] for i in range(n))
        print("YES" if ok else "NO")

threading.Thread(target=main).start()

